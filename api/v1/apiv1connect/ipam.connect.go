// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/ipam.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack/go-ipam/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IpamServiceName is the fully-qualified name of the IpamService service.
	IpamServiceName = "api.v1.IpamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IpamServiceCreatePrefixProcedure is the fully-qualified name of the IpamService's CreatePrefix
	// RPC.
	IpamServiceCreatePrefixProcedure = "/api.v1.IpamService/CreatePrefix"
	// IpamServiceDeletePrefixProcedure is the fully-qualified name of the IpamService's DeletePrefix
	// RPC.
	IpamServiceDeletePrefixProcedure = "/api.v1.IpamService/DeletePrefix"
	// IpamServiceGetPrefixProcedure is the fully-qualified name of the IpamService's GetPrefix RPC.
	IpamServiceGetPrefixProcedure = "/api.v1.IpamService/GetPrefix"
	// IpamServiceListPrefixesProcedure is the fully-qualified name of the IpamService's ListPrefixes
	// RPC.
	IpamServiceListPrefixesProcedure = "/api.v1.IpamService/ListPrefixes"
	// IpamServicePrefixUsageProcedure is the fully-qualified name of the IpamService's PrefixUsage RPC.
	IpamServicePrefixUsageProcedure = "/api.v1.IpamService/PrefixUsage"
	// IpamServiceAcquireChildPrefixProcedure is the fully-qualified name of the IpamService's
	// AcquireChildPrefix RPC.
	IpamServiceAcquireChildPrefixProcedure = "/api.v1.IpamService/AcquireChildPrefix"
	// IpamServiceReleaseChildPrefixProcedure is the fully-qualified name of the IpamService's
	// ReleaseChildPrefix RPC.
	IpamServiceReleaseChildPrefixProcedure = "/api.v1.IpamService/ReleaseChildPrefix"
	// IpamServiceAcquireIPProcedure is the fully-qualified name of the IpamService's AcquireIP RPC.
	IpamServiceAcquireIPProcedure = "/api.v1.IpamService/AcquireIP"
	// IpamServiceReleaseIPProcedure is the fully-qualified name of the IpamService's ReleaseIP RPC.
	IpamServiceReleaseIPProcedure = "/api.v1.IpamService/ReleaseIP"
	// IpamServiceDumpProcedure is the fully-qualified name of the IpamService's Dump RPC.
	IpamServiceDumpProcedure = "/api.v1.IpamService/Dump"
	// IpamServiceLoadProcedure is the fully-qualified name of the IpamService's Load RPC.
	IpamServiceLoadProcedure = "/api.v1.IpamService/Load"
	// IpamServiceCreateNamespaceProcedure is the fully-qualified name of the IpamService's
	// CreateNamespace RPC.
	IpamServiceCreateNamespaceProcedure = "/api.v1.IpamService/CreateNamespace"
	// IpamServiceListNamespacesProcedure is the fully-qualified name of the IpamService's
	// ListNamespaces RPC.
	IpamServiceListNamespacesProcedure = "/api.v1.IpamService/ListNamespaces"
	// IpamServiceDeleteNamespaceProcedure is the fully-qualified name of the IpamService's
	// DeleteNamespace RPC.
	IpamServiceDeleteNamespaceProcedure = "/api.v1.IpamService/DeleteNamespace"
	// IpamServiceVersionProcedure is the fully-qualified name of the IpamService's Version RPC.
	IpamServiceVersionProcedure = "/api.v1.IpamService/Version"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ipamServiceServiceDescriptor                  = v1.File_api_v1_ipam_proto.Services().ByName("IpamService")
	ipamServiceCreatePrefixMethodDescriptor       = ipamServiceServiceDescriptor.Methods().ByName("CreatePrefix")
	ipamServiceDeletePrefixMethodDescriptor       = ipamServiceServiceDescriptor.Methods().ByName("DeletePrefix")
	ipamServiceGetPrefixMethodDescriptor          = ipamServiceServiceDescriptor.Methods().ByName("GetPrefix")
	ipamServiceListPrefixesMethodDescriptor       = ipamServiceServiceDescriptor.Methods().ByName("ListPrefixes")
	ipamServicePrefixUsageMethodDescriptor        = ipamServiceServiceDescriptor.Methods().ByName("PrefixUsage")
	ipamServiceAcquireChildPrefixMethodDescriptor = ipamServiceServiceDescriptor.Methods().ByName("AcquireChildPrefix")
	ipamServiceReleaseChildPrefixMethodDescriptor = ipamServiceServiceDescriptor.Methods().ByName("ReleaseChildPrefix")
	ipamServiceAcquireIPMethodDescriptor          = ipamServiceServiceDescriptor.Methods().ByName("AcquireIP")
	ipamServiceReleaseIPMethodDescriptor          = ipamServiceServiceDescriptor.Methods().ByName("ReleaseIP")
	ipamServiceDumpMethodDescriptor               = ipamServiceServiceDescriptor.Methods().ByName("Dump")
	ipamServiceLoadMethodDescriptor               = ipamServiceServiceDescriptor.Methods().ByName("Load")
	ipamServiceCreateNamespaceMethodDescriptor    = ipamServiceServiceDescriptor.Methods().ByName("CreateNamespace")
	ipamServiceListNamespacesMethodDescriptor     = ipamServiceServiceDescriptor.Methods().ByName("ListNamespaces")
	ipamServiceDeleteNamespaceMethodDescriptor    = ipamServiceServiceDescriptor.Methods().ByName("DeleteNamespace")
	ipamServiceVersionMethodDescriptor            = ipamServiceServiceDescriptor.Methods().ByName("Version")
)

// IpamServiceClient is a client for the api.v1.IpamService service.
type IpamServiceClient interface {
	CreatePrefix(context.Context, *connect.Request[v1.CreatePrefixRequest]) (*connect.Response[v1.CreatePrefixResponse], error)
	DeletePrefix(context.Context, *connect.Request[v1.DeletePrefixRequest]) (*connect.Response[v1.DeletePrefixResponse], error)
	GetPrefix(context.Context, *connect.Request[v1.GetPrefixRequest]) (*connect.Response[v1.GetPrefixResponse], error)
	ListPrefixes(context.Context, *connect.Request[v1.ListPrefixesRequest]) (*connect.Response[v1.ListPrefixesResponse], error)
	PrefixUsage(context.Context, *connect.Request[v1.PrefixUsageRequest]) (*connect.Response[v1.PrefixUsageResponse], error)
	AcquireChildPrefix(context.Context, *connect.Request[v1.AcquireChildPrefixRequest]) (*connect.Response[v1.AcquireChildPrefixResponse], error)
	ReleaseChildPrefix(context.Context, *connect.Request[v1.ReleaseChildPrefixRequest]) (*connect.Response[v1.ReleaseChildPrefixResponse], error)
	AcquireIP(context.Context, *connect.Request[v1.AcquireIPRequest]) (*connect.Response[v1.AcquireIPResponse], error)
	ReleaseIP(context.Context, *connect.Request[v1.ReleaseIPRequest]) (*connect.Response[v1.ReleaseIPResponse], error)
	Dump(context.Context, *connect.Request[v1.DumpRequest]) (*connect.Response[v1.DumpResponse], error)
	Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error)
	CreateNamespace(context.Context, *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error)
	ListNamespaces(context.Context, *connect.Request[v1.ListNamespacesRequest]) (*connect.Response[v1.ListNamespacesResponse], error)
	DeleteNamespace(context.Context, *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error)
	Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error)
}

// NewIpamServiceClient constructs a client for the api.v1.IpamService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIpamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IpamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ipamServiceClient{
		createPrefix: connect.NewClient[v1.CreatePrefixRequest, v1.CreatePrefixResponse](
			httpClient,
			baseURL+IpamServiceCreatePrefixProcedure,
			connect.WithSchema(ipamServiceCreatePrefixMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePrefix: connect.NewClient[v1.DeletePrefixRequest, v1.DeletePrefixResponse](
			httpClient,
			baseURL+IpamServiceDeletePrefixProcedure,
			connect.WithSchema(ipamServiceDeletePrefixMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPrefix: connect.NewClient[v1.GetPrefixRequest, v1.GetPrefixResponse](
			httpClient,
			baseURL+IpamServiceGetPrefixProcedure,
			connect.WithSchema(ipamServiceGetPrefixMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPrefixes: connect.NewClient[v1.ListPrefixesRequest, v1.ListPrefixesResponse](
			httpClient,
			baseURL+IpamServiceListPrefixesProcedure,
			connect.WithSchema(ipamServiceListPrefixesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		prefixUsage: connect.NewClient[v1.PrefixUsageRequest, v1.PrefixUsageResponse](
			httpClient,
			baseURL+IpamServicePrefixUsageProcedure,
			connect.WithSchema(ipamServicePrefixUsageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		acquireChildPrefix: connect.NewClient[v1.AcquireChildPrefixRequest, v1.AcquireChildPrefixResponse](
			httpClient,
			baseURL+IpamServiceAcquireChildPrefixProcedure,
			connect.WithSchema(ipamServiceAcquireChildPrefixMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		releaseChildPrefix: connect.NewClient[v1.ReleaseChildPrefixRequest, v1.ReleaseChildPrefixResponse](
			httpClient,
			baseURL+IpamServiceReleaseChildPrefixProcedure,
			connect.WithSchema(ipamServiceReleaseChildPrefixMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		acquireIP: connect.NewClient[v1.AcquireIPRequest, v1.AcquireIPResponse](
			httpClient,
			baseURL+IpamServiceAcquireIPProcedure,
			connect.WithSchema(ipamServiceAcquireIPMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		releaseIP: connect.NewClient[v1.ReleaseIPRequest, v1.ReleaseIPResponse](
			httpClient,
			baseURL+IpamServiceReleaseIPProcedure,
			connect.WithSchema(ipamServiceReleaseIPMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dump: connect.NewClient[v1.DumpRequest, v1.DumpResponse](
			httpClient,
			baseURL+IpamServiceDumpProcedure,
			connect.WithSchema(ipamServiceDumpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		load: connect.NewClient[v1.LoadRequest, v1.LoadResponse](
			httpClient,
			baseURL+IpamServiceLoadProcedure,
			connect.WithSchema(ipamServiceLoadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNamespace: connect.NewClient[v1.CreateNamespaceRequest, v1.CreateNamespaceResponse](
			httpClient,
			baseURL+IpamServiceCreateNamespaceProcedure,
			connect.WithSchema(ipamServiceCreateNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNamespaces: connect.NewClient[v1.ListNamespacesRequest, v1.ListNamespacesResponse](
			httpClient,
			baseURL+IpamServiceListNamespacesProcedure,
			connect.WithSchema(ipamServiceListNamespacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNamespace: connect.NewClient[v1.DeleteNamespaceRequest, v1.DeleteNamespaceResponse](
			httpClient,
			baseURL+IpamServiceDeleteNamespaceProcedure,
			connect.WithSchema(ipamServiceDeleteNamespaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		version: connect.NewClient[v1.VersionRequest, v1.VersionResponse](
			httpClient,
			baseURL+IpamServiceVersionProcedure,
			connect.WithSchema(ipamServiceVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ipamServiceClient implements IpamServiceClient.
type ipamServiceClient struct {
	createPrefix       *connect.Client[v1.CreatePrefixRequest, v1.CreatePrefixResponse]
	deletePrefix       *connect.Client[v1.DeletePrefixRequest, v1.DeletePrefixResponse]
	getPrefix          *connect.Client[v1.GetPrefixRequest, v1.GetPrefixResponse]
	listPrefixes       *connect.Client[v1.ListPrefixesRequest, v1.ListPrefixesResponse]
	prefixUsage        *connect.Client[v1.PrefixUsageRequest, v1.PrefixUsageResponse]
	acquireChildPrefix *connect.Client[v1.AcquireChildPrefixRequest, v1.AcquireChildPrefixResponse]
	releaseChildPrefix *connect.Client[v1.ReleaseChildPrefixRequest, v1.ReleaseChildPrefixResponse]
	acquireIP          *connect.Client[v1.AcquireIPRequest, v1.AcquireIPResponse]
	releaseIP          *connect.Client[v1.ReleaseIPRequest, v1.ReleaseIPResponse]
	dump               *connect.Client[v1.DumpRequest, v1.DumpResponse]
	load               *connect.Client[v1.LoadRequest, v1.LoadResponse]
	createNamespace    *connect.Client[v1.CreateNamespaceRequest, v1.CreateNamespaceResponse]
	listNamespaces     *connect.Client[v1.ListNamespacesRequest, v1.ListNamespacesResponse]
	deleteNamespace    *connect.Client[v1.DeleteNamespaceRequest, v1.DeleteNamespaceResponse]
	version            *connect.Client[v1.VersionRequest, v1.VersionResponse]
}

// CreatePrefix calls api.v1.IpamService.CreatePrefix.
func (c *ipamServiceClient) CreatePrefix(ctx context.Context, req *connect.Request[v1.CreatePrefixRequest]) (*connect.Response[v1.CreatePrefixResponse], error) {
	return c.createPrefix.CallUnary(ctx, req)
}

// DeletePrefix calls api.v1.IpamService.DeletePrefix.
func (c *ipamServiceClient) DeletePrefix(ctx context.Context, req *connect.Request[v1.DeletePrefixRequest]) (*connect.Response[v1.DeletePrefixResponse], error) {
	return c.deletePrefix.CallUnary(ctx, req)
}

// GetPrefix calls api.v1.IpamService.GetPrefix.
func (c *ipamServiceClient) GetPrefix(ctx context.Context, req *connect.Request[v1.GetPrefixRequest]) (*connect.Response[v1.GetPrefixResponse], error) {
	return c.getPrefix.CallUnary(ctx, req)
}

// ListPrefixes calls api.v1.IpamService.ListPrefixes.
func (c *ipamServiceClient) ListPrefixes(ctx context.Context, req *connect.Request[v1.ListPrefixesRequest]) (*connect.Response[v1.ListPrefixesResponse], error) {
	return c.listPrefixes.CallUnary(ctx, req)
}

// PrefixUsage calls api.v1.IpamService.PrefixUsage.
func (c *ipamServiceClient) PrefixUsage(ctx context.Context, req *connect.Request[v1.PrefixUsageRequest]) (*connect.Response[v1.PrefixUsageResponse], error) {
	return c.prefixUsage.CallUnary(ctx, req)
}

// AcquireChildPrefix calls api.v1.IpamService.AcquireChildPrefix.
func (c *ipamServiceClient) AcquireChildPrefix(ctx context.Context, req *connect.Request[v1.AcquireChildPrefixRequest]) (*connect.Response[v1.AcquireChildPrefixResponse], error) {
	return c.acquireChildPrefix.CallUnary(ctx, req)
}

// ReleaseChildPrefix calls api.v1.IpamService.ReleaseChildPrefix.
func (c *ipamServiceClient) ReleaseChildPrefix(ctx context.Context, req *connect.Request[v1.ReleaseChildPrefixRequest]) (*connect.Response[v1.ReleaseChildPrefixResponse], error) {
	return c.releaseChildPrefix.CallUnary(ctx, req)
}

// AcquireIP calls api.v1.IpamService.AcquireIP.
func (c *ipamServiceClient) AcquireIP(ctx context.Context, req *connect.Request[v1.AcquireIPRequest]) (*connect.Response[v1.AcquireIPResponse], error) {
	return c.acquireIP.CallUnary(ctx, req)
}

// ReleaseIP calls api.v1.IpamService.ReleaseIP.
func (c *ipamServiceClient) ReleaseIP(ctx context.Context, req *connect.Request[v1.ReleaseIPRequest]) (*connect.Response[v1.ReleaseIPResponse], error) {
	return c.releaseIP.CallUnary(ctx, req)
}

// Dump calls api.v1.IpamService.Dump.
func (c *ipamServiceClient) Dump(ctx context.Context, req *connect.Request[v1.DumpRequest]) (*connect.Response[v1.DumpResponse], error) {
	return c.dump.CallUnary(ctx, req)
}

// Load calls api.v1.IpamService.Load.
func (c *ipamServiceClient) Load(ctx context.Context, req *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error) {
	return c.load.CallUnary(ctx, req)
}

// CreateNamespace calls api.v1.IpamService.CreateNamespace.
func (c *ipamServiceClient) CreateNamespace(ctx context.Context, req *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error) {
	return c.createNamespace.CallUnary(ctx, req)
}

// ListNamespaces calls api.v1.IpamService.ListNamespaces.
func (c *ipamServiceClient) ListNamespaces(ctx context.Context, req *connect.Request[v1.ListNamespacesRequest]) (*connect.Response[v1.ListNamespacesResponse], error) {
	return c.listNamespaces.CallUnary(ctx, req)
}

// DeleteNamespace calls api.v1.IpamService.DeleteNamespace.
func (c *ipamServiceClient) DeleteNamespace(ctx context.Context, req *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error) {
	return c.deleteNamespace.CallUnary(ctx, req)
}

// Version calls api.v1.IpamService.Version.
func (c *ipamServiceClient) Version(ctx context.Context, req *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error) {
	return c.version.CallUnary(ctx, req)
}

// IpamServiceHandler is an implementation of the api.v1.IpamService service.
type IpamServiceHandler interface {
	CreatePrefix(context.Context, *connect.Request[v1.CreatePrefixRequest]) (*connect.Response[v1.CreatePrefixResponse], error)
	DeletePrefix(context.Context, *connect.Request[v1.DeletePrefixRequest]) (*connect.Response[v1.DeletePrefixResponse], error)
	GetPrefix(context.Context, *connect.Request[v1.GetPrefixRequest]) (*connect.Response[v1.GetPrefixResponse], error)
	ListPrefixes(context.Context, *connect.Request[v1.ListPrefixesRequest]) (*connect.Response[v1.ListPrefixesResponse], error)
	PrefixUsage(context.Context, *connect.Request[v1.PrefixUsageRequest]) (*connect.Response[v1.PrefixUsageResponse], error)
	AcquireChildPrefix(context.Context, *connect.Request[v1.AcquireChildPrefixRequest]) (*connect.Response[v1.AcquireChildPrefixResponse], error)
	ReleaseChildPrefix(context.Context, *connect.Request[v1.ReleaseChildPrefixRequest]) (*connect.Response[v1.ReleaseChildPrefixResponse], error)
	AcquireIP(context.Context, *connect.Request[v1.AcquireIPRequest]) (*connect.Response[v1.AcquireIPResponse], error)
	ReleaseIP(context.Context, *connect.Request[v1.ReleaseIPRequest]) (*connect.Response[v1.ReleaseIPResponse], error)
	Dump(context.Context, *connect.Request[v1.DumpRequest]) (*connect.Response[v1.DumpResponse], error)
	Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error)
	CreateNamespace(context.Context, *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error)
	ListNamespaces(context.Context, *connect.Request[v1.ListNamespacesRequest]) (*connect.Response[v1.ListNamespacesResponse], error)
	DeleteNamespace(context.Context, *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error)
	Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error)
}

// NewIpamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIpamServiceHandler(svc IpamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ipamServiceCreatePrefixHandler := connect.NewUnaryHandler(
		IpamServiceCreatePrefixProcedure,
		svc.CreatePrefix,
		connect.WithSchema(ipamServiceCreatePrefixMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceDeletePrefixHandler := connect.NewUnaryHandler(
		IpamServiceDeletePrefixProcedure,
		svc.DeletePrefix,
		connect.WithSchema(ipamServiceDeletePrefixMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceGetPrefixHandler := connect.NewUnaryHandler(
		IpamServiceGetPrefixProcedure,
		svc.GetPrefix,
		connect.WithSchema(ipamServiceGetPrefixMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceListPrefixesHandler := connect.NewUnaryHandler(
		IpamServiceListPrefixesProcedure,
		svc.ListPrefixes,
		connect.WithSchema(ipamServiceListPrefixesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServicePrefixUsageHandler := connect.NewUnaryHandler(
		IpamServicePrefixUsageProcedure,
		svc.PrefixUsage,
		connect.WithSchema(ipamServicePrefixUsageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceAcquireChildPrefixHandler := connect.NewUnaryHandler(
		IpamServiceAcquireChildPrefixProcedure,
		svc.AcquireChildPrefix,
		connect.WithSchema(ipamServiceAcquireChildPrefixMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceReleaseChildPrefixHandler := connect.NewUnaryHandler(
		IpamServiceReleaseChildPrefixProcedure,
		svc.ReleaseChildPrefix,
		connect.WithSchema(ipamServiceReleaseChildPrefixMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceAcquireIPHandler := connect.NewUnaryHandler(
		IpamServiceAcquireIPProcedure,
		svc.AcquireIP,
		connect.WithSchema(ipamServiceAcquireIPMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceReleaseIPHandler := connect.NewUnaryHandler(
		IpamServiceReleaseIPProcedure,
		svc.ReleaseIP,
		connect.WithSchema(ipamServiceReleaseIPMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceDumpHandler := connect.NewUnaryHandler(
		IpamServiceDumpProcedure,
		svc.Dump,
		connect.WithSchema(ipamServiceDumpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceLoadHandler := connect.NewUnaryHandler(
		IpamServiceLoadProcedure,
		svc.Load,
		connect.WithSchema(ipamServiceLoadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceCreateNamespaceHandler := connect.NewUnaryHandler(
		IpamServiceCreateNamespaceProcedure,
		svc.CreateNamespace,
		connect.WithSchema(ipamServiceCreateNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceListNamespacesHandler := connect.NewUnaryHandler(
		IpamServiceListNamespacesProcedure,
		svc.ListNamespaces,
		connect.WithSchema(ipamServiceListNamespacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceDeleteNamespaceHandler := connect.NewUnaryHandler(
		IpamServiceDeleteNamespaceProcedure,
		svc.DeleteNamespace,
		connect.WithSchema(ipamServiceDeleteNamespaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ipamServiceVersionHandler := connect.NewUnaryHandler(
		IpamServiceVersionProcedure,
		svc.Version,
		connect.WithSchema(ipamServiceVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.IpamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IpamServiceCreatePrefixProcedure:
			ipamServiceCreatePrefixHandler.ServeHTTP(w, r)
		case IpamServiceDeletePrefixProcedure:
			ipamServiceDeletePrefixHandler.ServeHTTP(w, r)
		case IpamServiceGetPrefixProcedure:
			ipamServiceGetPrefixHandler.ServeHTTP(w, r)
		case IpamServiceListPrefixesProcedure:
			ipamServiceListPrefixesHandler.ServeHTTP(w, r)
		case IpamServicePrefixUsageProcedure:
			ipamServicePrefixUsageHandler.ServeHTTP(w, r)
		case IpamServiceAcquireChildPrefixProcedure:
			ipamServiceAcquireChildPrefixHandler.ServeHTTP(w, r)
		case IpamServiceReleaseChildPrefixProcedure:
			ipamServiceReleaseChildPrefixHandler.ServeHTTP(w, r)
		case IpamServiceAcquireIPProcedure:
			ipamServiceAcquireIPHandler.ServeHTTP(w, r)
		case IpamServiceReleaseIPProcedure:
			ipamServiceReleaseIPHandler.ServeHTTP(w, r)
		case IpamServiceDumpProcedure:
			ipamServiceDumpHandler.ServeHTTP(w, r)
		case IpamServiceLoadProcedure:
			ipamServiceLoadHandler.ServeHTTP(w, r)
		case IpamServiceCreateNamespaceProcedure:
			ipamServiceCreateNamespaceHandler.ServeHTTP(w, r)
		case IpamServiceListNamespacesProcedure:
			ipamServiceListNamespacesHandler.ServeHTTP(w, r)
		case IpamServiceDeleteNamespaceProcedure:
			ipamServiceDeleteNamespaceHandler.ServeHTTP(w, r)
		case IpamServiceVersionProcedure:
			ipamServiceVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIpamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIpamServiceHandler struct{}

func (UnimplementedIpamServiceHandler) CreatePrefix(context.Context, *connect.Request[v1.CreatePrefixRequest]) (*connect.Response[v1.CreatePrefixResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.CreatePrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) DeletePrefix(context.Context, *connect.Request[v1.DeletePrefixRequest]) (*connect.Response[v1.DeletePrefixResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.DeletePrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) GetPrefix(context.Context, *connect.Request[v1.GetPrefixRequest]) (*connect.Response[v1.GetPrefixResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.GetPrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) ListPrefixes(context.Context, *connect.Request[v1.ListPrefixesRequest]) (*connect.Response[v1.ListPrefixesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.ListPrefixes is not implemented"))
}

func (UnimplementedIpamServiceHandler) PrefixUsage(context.Context, *connect.Request[v1.PrefixUsageRequest]) (*connect.Response[v1.PrefixUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.PrefixUsage is not implemented"))
}

func (UnimplementedIpamServiceHandler) AcquireChildPrefix(context.Context, *connect.Request[v1.AcquireChildPrefixRequest]) (*connect.Response[v1.AcquireChildPrefixResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.AcquireChildPrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) ReleaseChildPrefix(context.Context, *connect.Request[v1.ReleaseChildPrefixRequest]) (*connect.Response[v1.ReleaseChildPrefixResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.ReleaseChildPrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) AcquireIP(context.Context, *connect.Request[v1.AcquireIPRequest]) (*connect.Response[v1.AcquireIPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.AcquireIP is not implemented"))
}

func (UnimplementedIpamServiceHandler) ReleaseIP(context.Context, *connect.Request[v1.ReleaseIPRequest]) (*connect.Response[v1.ReleaseIPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.ReleaseIP is not implemented"))
}

func (UnimplementedIpamServiceHandler) Dump(context.Context, *connect.Request[v1.DumpRequest]) (*connect.Response[v1.DumpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.Dump is not implemented"))
}

func (UnimplementedIpamServiceHandler) Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.Load is not implemented"))
}

func (UnimplementedIpamServiceHandler) CreateNamespace(context.Context, *connect.Request[v1.CreateNamespaceRequest]) (*connect.Response[v1.CreateNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.CreateNamespace is not implemented"))
}

func (UnimplementedIpamServiceHandler) ListNamespaces(context.Context, *connect.Request[v1.ListNamespacesRequest]) (*connect.Response[v1.ListNamespacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.ListNamespaces is not implemented"))
}

func (UnimplementedIpamServiceHandler) DeleteNamespace(context.Context, *connect.Request[v1.DeleteNamespaceRequest]) (*connect.Response[v1.DeleteNamespaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.DeleteNamespace is not implemented"))
}

func (UnimplementedIpamServiceHandler) Version(context.Context, *connect.Request[v1.VersionRequest]) (*connect.Response[v1.VersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.IpamService.Version is not implemented"))
}
