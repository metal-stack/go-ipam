// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/ipam.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/metal-stack/go-ipam/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IpamServiceName is the fully-qualified name of the IpamService service.
	IpamServiceName = "api.v1.IpamService"
)

// IpamServiceClient is a client for the api.v1.IpamService service.
type IpamServiceClient interface {
	CreatePrefix(context.Context, *connect_go.Request[v1.CreatePrefixRequest]) (*connect_go.Response[v1.CreatePrefixResponse], error)
	DeletePrefix(context.Context, *connect_go.Request[v1.DeletePrefixRequest]) (*connect_go.Response[v1.DeletePrefixResponse], error)
	GetPrefix(context.Context, *connect_go.Request[v1.GetPrefixRequest]) (*connect_go.Response[v1.GetPrefixResponse], error)
	ListPrefixes(context.Context, *connect_go.Request[v1.ListPrefixesRequest]) (*connect_go.Response[v1.ListPrefixesResponse], error)
	AcquireChildPrefix(context.Context, *connect_go.Request[v1.AcquireChildPrefixRequest]) (*connect_go.Response[v1.AcquireChildPrefixResponse], error)
	ReleaseChildPrefix(context.Context, *connect_go.Request[v1.ReleaseChildPrefixRequest]) (*connect_go.Response[v1.ReleaseChildPrefixResponse], error)
	AcquireIP(context.Context, *connect_go.Request[v1.AcquireIPRequest]) (*connect_go.Response[v1.AcquireIPResponse], error)
	ReleaseIP(context.Context, *connect_go.Request[v1.ReleaseIPRequest]) (*connect_go.Response[v1.ReleaseIPResponse], error)
	Dump(context.Context, *connect_go.Request[v1.DumpRequest]) (*connect_go.Response[v1.DumpResponse], error)
	Load(context.Context, *connect_go.Request[v1.LoadRequest]) (*connect_go.Response[v1.LoadResponse], error)
}

// NewIpamServiceClient constructs a client for the api.v1.IpamService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIpamServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IpamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ipamServiceClient{
		createPrefix: connect_go.NewClient[v1.CreatePrefixRequest, v1.CreatePrefixResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/CreatePrefix",
			opts...,
		),
		deletePrefix: connect_go.NewClient[v1.DeletePrefixRequest, v1.DeletePrefixResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/DeletePrefix",
			opts...,
		),
		getPrefix: connect_go.NewClient[v1.GetPrefixRequest, v1.GetPrefixResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/GetPrefix",
			opts...,
		),
		listPrefixes: connect_go.NewClient[v1.ListPrefixesRequest, v1.ListPrefixesResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/ListPrefixes",
			opts...,
		),
		acquireChildPrefix: connect_go.NewClient[v1.AcquireChildPrefixRequest, v1.AcquireChildPrefixResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/AcquireChildPrefix",
			opts...,
		),
		releaseChildPrefix: connect_go.NewClient[v1.ReleaseChildPrefixRequest, v1.ReleaseChildPrefixResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/ReleaseChildPrefix",
			opts...,
		),
		acquireIP: connect_go.NewClient[v1.AcquireIPRequest, v1.AcquireIPResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/AcquireIP",
			opts...,
		),
		releaseIP: connect_go.NewClient[v1.ReleaseIPRequest, v1.ReleaseIPResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/ReleaseIP",
			opts...,
		),
		dump: connect_go.NewClient[v1.DumpRequest, v1.DumpResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/Dump",
			opts...,
		),
		load: connect_go.NewClient[v1.LoadRequest, v1.LoadResponse](
			httpClient,
			baseURL+"/api.v1.IpamService/Load",
			opts...,
		),
	}
}

// ipamServiceClient implements IpamServiceClient.
type ipamServiceClient struct {
	createPrefix       *connect_go.Client[v1.CreatePrefixRequest, v1.CreatePrefixResponse]
	deletePrefix       *connect_go.Client[v1.DeletePrefixRequest, v1.DeletePrefixResponse]
	getPrefix          *connect_go.Client[v1.GetPrefixRequest, v1.GetPrefixResponse]
	listPrefixes       *connect_go.Client[v1.ListPrefixesRequest, v1.ListPrefixesResponse]
	acquireChildPrefix *connect_go.Client[v1.AcquireChildPrefixRequest, v1.AcquireChildPrefixResponse]
	releaseChildPrefix *connect_go.Client[v1.ReleaseChildPrefixRequest, v1.ReleaseChildPrefixResponse]
	acquireIP          *connect_go.Client[v1.AcquireIPRequest, v1.AcquireIPResponse]
	releaseIP          *connect_go.Client[v1.ReleaseIPRequest, v1.ReleaseIPResponse]
	dump               *connect_go.Client[v1.DumpRequest, v1.DumpResponse]
	load               *connect_go.Client[v1.LoadRequest, v1.LoadResponse]
}

// CreatePrefix calls api.v1.IpamService.CreatePrefix.
func (c *ipamServiceClient) CreatePrefix(ctx context.Context, req *connect_go.Request[v1.CreatePrefixRequest]) (*connect_go.Response[v1.CreatePrefixResponse], error) {
	return c.createPrefix.CallUnary(ctx, req)
}

// DeletePrefix calls api.v1.IpamService.DeletePrefix.
func (c *ipamServiceClient) DeletePrefix(ctx context.Context, req *connect_go.Request[v1.DeletePrefixRequest]) (*connect_go.Response[v1.DeletePrefixResponse], error) {
	return c.deletePrefix.CallUnary(ctx, req)
}

// GetPrefix calls api.v1.IpamService.GetPrefix.
func (c *ipamServiceClient) GetPrefix(ctx context.Context, req *connect_go.Request[v1.GetPrefixRequest]) (*connect_go.Response[v1.GetPrefixResponse], error) {
	return c.getPrefix.CallUnary(ctx, req)
}

// ListPrefixes calls api.v1.IpamService.ListPrefixes.
func (c *ipamServiceClient) ListPrefixes(ctx context.Context, req *connect_go.Request[v1.ListPrefixesRequest]) (*connect_go.Response[v1.ListPrefixesResponse], error) {
	return c.listPrefixes.CallUnary(ctx, req)
}

// AcquireChildPrefix calls api.v1.IpamService.AcquireChildPrefix.
func (c *ipamServiceClient) AcquireChildPrefix(ctx context.Context, req *connect_go.Request[v1.AcquireChildPrefixRequest]) (*connect_go.Response[v1.AcquireChildPrefixResponse], error) {
	return c.acquireChildPrefix.CallUnary(ctx, req)
}

// ReleaseChildPrefix calls api.v1.IpamService.ReleaseChildPrefix.
func (c *ipamServiceClient) ReleaseChildPrefix(ctx context.Context, req *connect_go.Request[v1.ReleaseChildPrefixRequest]) (*connect_go.Response[v1.ReleaseChildPrefixResponse], error) {
	return c.releaseChildPrefix.CallUnary(ctx, req)
}

// AcquireIP calls api.v1.IpamService.AcquireIP.
func (c *ipamServiceClient) AcquireIP(ctx context.Context, req *connect_go.Request[v1.AcquireIPRequest]) (*connect_go.Response[v1.AcquireIPResponse], error) {
	return c.acquireIP.CallUnary(ctx, req)
}

// ReleaseIP calls api.v1.IpamService.ReleaseIP.
func (c *ipamServiceClient) ReleaseIP(ctx context.Context, req *connect_go.Request[v1.ReleaseIPRequest]) (*connect_go.Response[v1.ReleaseIPResponse], error) {
	return c.releaseIP.CallUnary(ctx, req)
}

// Dump calls api.v1.IpamService.Dump.
func (c *ipamServiceClient) Dump(ctx context.Context, req *connect_go.Request[v1.DumpRequest]) (*connect_go.Response[v1.DumpResponse], error) {
	return c.dump.CallUnary(ctx, req)
}

// Load calls api.v1.IpamService.Load.
func (c *ipamServiceClient) Load(ctx context.Context, req *connect_go.Request[v1.LoadRequest]) (*connect_go.Response[v1.LoadResponse], error) {
	return c.load.CallUnary(ctx, req)
}

// IpamServiceHandler is an implementation of the api.v1.IpamService service.
type IpamServiceHandler interface {
	CreatePrefix(context.Context, *connect_go.Request[v1.CreatePrefixRequest]) (*connect_go.Response[v1.CreatePrefixResponse], error)
	DeletePrefix(context.Context, *connect_go.Request[v1.DeletePrefixRequest]) (*connect_go.Response[v1.DeletePrefixResponse], error)
	GetPrefix(context.Context, *connect_go.Request[v1.GetPrefixRequest]) (*connect_go.Response[v1.GetPrefixResponse], error)
	ListPrefixes(context.Context, *connect_go.Request[v1.ListPrefixesRequest]) (*connect_go.Response[v1.ListPrefixesResponse], error)
	AcquireChildPrefix(context.Context, *connect_go.Request[v1.AcquireChildPrefixRequest]) (*connect_go.Response[v1.AcquireChildPrefixResponse], error)
	ReleaseChildPrefix(context.Context, *connect_go.Request[v1.ReleaseChildPrefixRequest]) (*connect_go.Response[v1.ReleaseChildPrefixResponse], error)
	AcquireIP(context.Context, *connect_go.Request[v1.AcquireIPRequest]) (*connect_go.Response[v1.AcquireIPResponse], error)
	ReleaseIP(context.Context, *connect_go.Request[v1.ReleaseIPRequest]) (*connect_go.Response[v1.ReleaseIPResponse], error)
	Dump(context.Context, *connect_go.Request[v1.DumpRequest]) (*connect_go.Response[v1.DumpResponse], error)
	Load(context.Context, *connect_go.Request[v1.LoadRequest]) (*connect_go.Response[v1.LoadResponse], error)
}

// NewIpamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIpamServiceHandler(svc IpamServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.IpamService/CreatePrefix", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/CreatePrefix",
		svc.CreatePrefix,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/DeletePrefix", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/DeletePrefix",
		svc.DeletePrefix,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/GetPrefix", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/GetPrefix",
		svc.GetPrefix,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/ListPrefixes", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/ListPrefixes",
		svc.ListPrefixes,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/AcquireChildPrefix", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/AcquireChildPrefix",
		svc.AcquireChildPrefix,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/ReleaseChildPrefix", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/ReleaseChildPrefix",
		svc.ReleaseChildPrefix,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/AcquireIP", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/AcquireIP",
		svc.AcquireIP,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/ReleaseIP", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/ReleaseIP",
		svc.ReleaseIP,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/Dump", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/Dump",
		svc.Dump,
		opts...,
	))
	mux.Handle("/api.v1.IpamService/Load", connect_go.NewUnaryHandler(
		"/api.v1.IpamService/Load",
		svc.Load,
		opts...,
	))
	return "/api.v1.IpamService/", mux
}

// UnimplementedIpamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIpamServiceHandler struct{}

func (UnimplementedIpamServiceHandler) CreatePrefix(context.Context, *connect_go.Request[v1.CreatePrefixRequest]) (*connect_go.Response[v1.CreatePrefixResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.CreatePrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) DeletePrefix(context.Context, *connect_go.Request[v1.DeletePrefixRequest]) (*connect_go.Response[v1.DeletePrefixResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.DeletePrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) GetPrefix(context.Context, *connect_go.Request[v1.GetPrefixRequest]) (*connect_go.Response[v1.GetPrefixResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.GetPrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) ListPrefixes(context.Context, *connect_go.Request[v1.ListPrefixesRequest]) (*connect_go.Response[v1.ListPrefixesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.ListPrefixes is not implemented"))
}

func (UnimplementedIpamServiceHandler) AcquireChildPrefix(context.Context, *connect_go.Request[v1.AcquireChildPrefixRequest]) (*connect_go.Response[v1.AcquireChildPrefixResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.AcquireChildPrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) ReleaseChildPrefix(context.Context, *connect_go.Request[v1.ReleaseChildPrefixRequest]) (*connect_go.Response[v1.ReleaseChildPrefixResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.ReleaseChildPrefix is not implemented"))
}

func (UnimplementedIpamServiceHandler) AcquireIP(context.Context, *connect_go.Request[v1.AcquireIPRequest]) (*connect_go.Response[v1.AcquireIPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.AcquireIP is not implemented"))
}

func (UnimplementedIpamServiceHandler) ReleaseIP(context.Context, *connect_go.Request[v1.ReleaseIPRequest]) (*connect_go.Response[v1.ReleaseIPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.ReleaseIP is not implemented"))
}

func (UnimplementedIpamServiceHandler) Dump(context.Context, *connect_go.Request[v1.DumpRequest]) (*connect_go.Response[v1.DumpResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.Dump is not implemented"))
}

func (UnimplementedIpamServiceHandler) Load(context.Context, *connect_go.Request[v1.LoadRequest]) (*connect_go.Response[v1.LoadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.IpamService.Load is not implemented"))
}
