// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api/v1/ipam.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.Prefix
 */
export class Prefix extends Message<Prefix> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: string parent_cidr = 2;
   */
  parentCidr = "";

  constructor(data?: PartialMessage<Prefix>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Prefix";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parent_cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Prefix {
    return new Prefix().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Prefix {
    return new Prefix().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Prefix {
    return new Prefix().fromJsonString(jsonString, options);
  }

  static equals(a: Prefix | PlainMessage<Prefix> | undefined, b: Prefix | PlainMessage<Prefix> | undefined): boolean {
    return proto3.util.equals(Prefix, a, b);
  }
}

/**
 * @generated from message api.v1.CreatePrefixResponse
 */
export class CreatePrefixResponse extends Message<CreatePrefixResponse> {
  /**
   * @generated from field: api.v1.Prefix prefix = 1;
   */
  prefix?: Prefix;

  constructor(data?: PartialMessage<CreatePrefixResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreatePrefixResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "message", T: Prefix },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePrefixResponse {
    return new CreatePrefixResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePrefixResponse {
    return new CreatePrefixResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePrefixResponse {
    return new CreatePrefixResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePrefixResponse | PlainMessage<CreatePrefixResponse> | undefined, b: CreatePrefixResponse | PlainMessage<CreatePrefixResponse> | undefined): boolean {
    return proto3.util.equals(CreatePrefixResponse, a, b);
  }
}

/**
 * @generated from message api.v1.DeletePrefixResponse
 */
export class DeletePrefixResponse extends Message<DeletePrefixResponse> {
  /**
   * @generated from field: api.v1.Prefix prefix = 1;
   */
  prefix?: Prefix;

  constructor(data?: PartialMessage<DeletePrefixResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeletePrefixResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "message", T: Prefix },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePrefixResponse {
    return new DeletePrefixResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePrefixResponse {
    return new DeletePrefixResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePrefixResponse {
    return new DeletePrefixResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePrefixResponse | PlainMessage<DeletePrefixResponse> | undefined, b: DeletePrefixResponse | PlainMessage<DeletePrefixResponse> | undefined): boolean {
    return proto3.util.equals(DeletePrefixResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetPrefixResponse
 */
export class GetPrefixResponse extends Message<GetPrefixResponse> {
  /**
   * @generated from field: api.v1.Prefix prefix = 1;
   */
  prefix?: Prefix;

  constructor(data?: PartialMessage<GetPrefixResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPrefixResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "message", T: Prefix },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPrefixResponse {
    return new GetPrefixResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPrefixResponse {
    return new GetPrefixResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPrefixResponse {
    return new GetPrefixResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPrefixResponse | PlainMessage<GetPrefixResponse> | undefined, b: GetPrefixResponse | PlainMessage<GetPrefixResponse> | undefined): boolean {
    return proto3.util.equals(GetPrefixResponse, a, b);
  }
}

/**
 * @generated from message api.v1.AcquireChildPrefixResponse
 */
export class AcquireChildPrefixResponse extends Message<AcquireChildPrefixResponse> {
  /**
   * @generated from field: api.v1.Prefix prefix = 1;
   */
  prefix?: Prefix;

  constructor(data?: PartialMessage<AcquireChildPrefixResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AcquireChildPrefixResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "message", T: Prefix },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireChildPrefixResponse {
    return new AcquireChildPrefixResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireChildPrefixResponse {
    return new AcquireChildPrefixResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcquireChildPrefixResponse {
    return new AcquireChildPrefixResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcquireChildPrefixResponse | PlainMessage<AcquireChildPrefixResponse> | undefined, b: AcquireChildPrefixResponse | PlainMessage<AcquireChildPrefixResponse> | undefined): boolean {
    return proto3.util.equals(AcquireChildPrefixResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ReleaseChildPrefixResponse
 */
export class ReleaseChildPrefixResponse extends Message<ReleaseChildPrefixResponse> {
  /**
   * @generated from field: api.v1.Prefix prefix = 1;
   */
  prefix?: Prefix;

  constructor(data?: PartialMessage<ReleaseChildPrefixResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReleaseChildPrefixResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "message", T: Prefix },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseChildPrefixResponse {
    return new ReleaseChildPrefixResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseChildPrefixResponse {
    return new ReleaseChildPrefixResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseChildPrefixResponse {
    return new ReleaseChildPrefixResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReleaseChildPrefixResponse | PlainMessage<ReleaseChildPrefixResponse> | undefined, b: ReleaseChildPrefixResponse | PlainMessage<ReleaseChildPrefixResponse> | undefined): boolean {
    return proto3.util.equals(ReleaseChildPrefixResponse, a, b);
  }
}

/**
 * @generated from message api.v1.CreatePrefixRequest
 */
export class CreatePrefixRequest extends Message<CreatePrefixRequest> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<CreatePrefixRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreatePrefixRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePrefixRequest {
    return new CreatePrefixRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePrefixRequest {
    return new CreatePrefixRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePrefixRequest {
    return new CreatePrefixRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePrefixRequest | PlainMessage<CreatePrefixRequest> | undefined, b: CreatePrefixRequest | PlainMessage<CreatePrefixRequest> | undefined): boolean {
    return proto3.util.equals(CreatePrefixRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DeletePrefixRequest
 */
export class DeletePrefixRequest extends Message<DeletePrefixRequest> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<DeletePrefixRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeletePrefixRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePrefixRequest {
    return new DeletePrefixRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePrefixRequest {
    return new DeletePrefixRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePrefixRequest {
    return new DeletePrefixRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePrefixRequest | PlainMessage<DeletePrefixRequest> | undefined, b: DeletePrefixRequest | PlainMessage<DeletePrefixRequest> | undefined): boolean {
    return proto3.util.equals(DeletePrefixRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetPrefixRequest
 */
export class GetPrefixRequest extends Message<GetPrefixRequest> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<GetPrefixRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPrefixRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPrefixRequest {
    return new GetPrefixRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPrefixRequest {
    return new GetPrefixRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPrefixRequest {
    return new GetPrefixRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPrefixRequest | PlainMessage<GetPrefixRequest> | undefined, b: GetPrefixRequest | PlainMessage<GetPrefixRequest> | undefined): boolean {
    return proto3.util.equals(GetPrefixRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ListPrefixesRequest
 */
export class ListPrefixesRequest extends Message<ListPrefixesRequest> {
  /**
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  constructor(data?: PartialMessage<ListPrefixesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListPrefixesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPrefixesRequest {
    return new ListPrefixesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPrefixesRequest {
    return new ListPrefixesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPrefixesRequest {
    return new ListPrefixesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPrefixesRequest | PlainMessage<ListPrefixesRequest> | undefined, b: ListPrefixesRequest | PlainMessage<ListPrefixesRequest> | undefined): boolean {
    return proto3.util.equals(ListPrefixesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ListPrefixesResponse
 */
export class ListPrefixesResponse extends Message<ListPrefixesResponse> {
  /**
   * @generated from field: repeated api.v1.Prefix prefixes = 1;
   */
  prefixes: Prefix[] = [];

  constructor(data?: PartialMessage<ListPrefixesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListPrefixesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefixes", kind: "message", T: Prefix, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPrefixesResponse {
    return new ListPrefixesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPrefixesResponse {
    return new ListPrefixesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPrefixesResponse {
    return new ListPrefixesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPrefixesResponse | PlainMessage<ListPrefixesResponse> | undefined, b: ListPrefixesResponse | PlainMessage<ListPrefixesResponse> | undefined): boolean {
    return proto3.util.equals(ListPrefixesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.PrefixUsageRequest
 */
export class PrefixUsageRequest extends Message<PrefixUsageRequest> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<PrefixUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PrefixUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrefixUsageRequest {
    return new PrefixUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrefixUsageRequest {
    return new PrefixUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrefixUsageRequest {
    return new PrefixUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PrefixUsageRequest | PlainMessage<PrefixUsageRequest> | undefined, b: PrefixUsageRequest | PlainMessage<PrefixUsageRequest> | undefined): boolean {
    return proto3.util.equals(PrefixUsageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.PrefixUsageResponse
 */
export class PrefixUsageResponse extends Message<PrefixUsageResponse> {
  /**
   * AvailableIPs the number of available IPs if this is not a parent prefix
   * No more than 2^31 available IPs are reported
   *
   * @generated from field: uint64 available_ips = 1;
   */
  availableIps = protoInt64.zero;

  /**
   * AcquiredIPs the number of acquired IPs if this is not a parent prefix
   *
   * @generated from field: uint64 acquired_ips = 2;
   */
  acquiredIps = protoInt64.zero;

  /**
   * AvailableSmallestPrefixes is the count of available Prefixes with 2 countable Bits
   * No more than 2^31 available Prefixes are reported
   *
   * @generated from field: uint64 available_smallest_prefixes = 3;
   */
  availableSmallestPrefixes = protoInt64.zero;

  /**
   * AvailablePrefixes is a list of prefixes which are available
   *
   * @generated from field: repeated string available_prefixes = 4;
   */
  availablePrefixes: string[] = [];

  /**
   * AcquiredPrefixes the number of acquired prefixes if this is a parent prefix
   *
   * @generated from field: uint64 acquired_prefixes = 5;
   */
  acquiredPrefixes = protoInt64.zero;

  constructor(data?: PartialMessage<PrefixUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PrefixUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "available_ips", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "acquired_ips", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "available_smallest_prefixes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "available_prefixes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "acquired_prefixes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrefixUsageResponse {
    return new PrefixUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrefixUsageResponse {
    return new PrefixUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrefixUsageResponse {
    return new PrefixUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PrefixUsageResponse | PlainMessage<PrefixUsageResponse> | undefined, b: PrefixUsageResponse | PlainMessage<PrefixUsageResponse> | undefined): boolean {
    return proto3.util.equals(PrefixUsageResponse, a, b);
  }
}

/**
 * @generated from message api.v1.AcquireChildPrefixRequest
 */
export class AcquireChildPrefixRequest extends Message<AcquireChildPrefixRequest> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: uint32 length = 2;
   */
  length = 0;

  /**
   * @generated from field: optional string child_cidr = 3;
   */
  childCidr?: string;

  /**
   * @generated from field: optional string namespace = 4;
   */
  namespace?: string;

  constructor(data?: PartialMessage<AcquireChildPrefixRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AcquireChildPrefixRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "child_cidr", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireChildPrefixRequest {
    return new AcquireChildPrefixRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireChildPrefixRequest {
    return new AcquireChildPrefixRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcquireChildPrefixRequest {
    return new AcquireChildPrefixRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcquireChildPrefixRequest | PlainMessage<AcquireChildPrefixRequest> | undefined, b: AcquireChildPrefixRequest | PlainMessage<AcquireChildPrefixRequest> | undefined): boolean {
    return proto3.util.equals(AcquireChildPrefixRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ReleaseChildPrefixRequest
 */
export class ReleaseChildPrefixRequest extends Message<ReleaseChildPrefixRequest> {
  /**
   * @generated from field: string cidr = 1;
   */
  cidr = "";

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<ReleaseChildPrefixRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReleaseChildPrefixRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseChildPrefixRequest {
    return new ReleaseChildPrefixRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseChildPrefixRequest {
    return new ReleaseChildPrefixRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseChildPrefixRequest {
    return new ReleaseChildPrefixRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReleaseChildPrefixRequest | PlainMessage<ReleaseChildPrefixRequest> | undefined, b: ReleaseChildPrefixRequest | PlainMessage<ReleaseChildPrefixRequest> | undefined): boolean {
    return proto3.util.equals(ReleaseChildPrefixRequest, a, b);
  }
}

/**
 * @generated from message api.v1.IP
 */
export class IP extends Message<IP> {
  /**
   * @generated from field: string ip = 1;
   */
  ip = "";

  /**
   * @generated from field: string parent_prefix = 2;
   */
  parentPrefix = "";

  constructor(data?: PartialMessage<IP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.IP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parent_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IP {
    return new IP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IP {
    return new IP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IP {
    return new IP().fromJsonString(jsonString, options);
  }

  static equals(a: IP | PlainMessage<IP> | undefined, b: IP | PlainMessage<IP> | undefined): boolean {
    return proto3.util.equals(IP, a, b);
  }
}

/**
 * @generated from message api.v1.AcquireIPResponse
 */
export class AcquireIPResponse extends Message<AcquireIPResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<AcquireIPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AcquireIPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireIPResponse {
    return new AcquireIPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireIPResponse {
    return new AcquireIPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcquireIPResponse {
    return new AcquireIPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcquireIPResponse | PlainMessage<AcquireIPResponse> | undefined, b: AcquireIPResponse | PlainMessage<AcquireIPResponse> | undefined): boolean {
    return proto3.util.equals(AcquireIPResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ReleaseIPResponse
 */
export class ReleaseIPResponse extends Message<ReleaseIPResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<ReleaseIPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReleaseIPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseIPResponse {
    return new ReleaseIPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseIPResponse {
    return new ReleaseIPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseIPResponse {
    return new ReleaseIPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReleaseIPResponse | PlainMessage<ReleaseIPResponse> | undefined, b: ReleaseIPResponse | PlainMessage<ReleaseIPResponse> | undefined): boolean {
    return proto3.util.equals(ReleaseIPResponse, a, b);
  }
}

/**
 * @generated from message api.v1.AcquireIPRequest
 */
export class AcquireIPRequest extends Message<AcquireIPRequest> {
  /**
   * @generated from field: string prefix_cidr = 1;
   */
  prefixCidr = "";

  /**
   * @generated from field: optional string ip = 2;
   */
  ip?: string;

  /**
   * @generated from field: optional string namespace = 3;
   */
  namespace?: string;

  constructor(data?: PartialMessage<AcquireIPRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AcquireIPRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix_cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcquireIPRequest {
    return new AcquireIPRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcquireIPRequest {
    return new AcquireIPRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcquireIPRequest {
    return new AcquireIPRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcquireIPRequest | PlainMessage<AcquireIPRequest> | undefined, b: AcquireIPRequest | PlainMessage<AcquireIPRequest> | undefined): boolean {
    return proto3.util.equals(AcquireIPRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ReleaseIPRequest
 */
export class ReleaseIPRequest extends Message<ReleaseIPRequest> {
  /**
   * @generated from field: string prefix_cidr = 1;
   */
  prefixCidr = "";

  /**
   * @generated from field: string ip = 2;
   */
  ip = "";

  /**
   * @generated from field: optional string namespace = 3;
   */
  namespace?: string;

  constructor(data?: PartialMessage<ReleaseIPRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReleaseIPRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix_cidr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseIPRequest {
    return new ReleaseIPRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseIPRequest {
    return new ReleaseIPRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseIPRequest {
    return new ReleaseIPRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReleaseIPRequest | PlainMessage<ReleaseIPRequest> | undefined, b: ReleaseIPRequest | PlainMessage<ReleaseIPRequest> | undefined): boolean {
    return proto3.util.equals(ReleaseIPRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DumpRequest
 */
export class DumpRequest extends Message<DumpRequest> {
  /**
   * @generated from field: optional string namespace = 1;
   */
  namespace?: string;

  constructor(data?: PartialMessage<DumpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DumpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DumpRequest {
    return new DumpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DumpRequest {
    return new DumpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DumpRequest {
    return new DumpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DumpRequest | PlainMessage<DumpRequest> | undefined, b: DumpRequest | PlainMessage<DumpRequest> | undefined): boolean {
    return proto3.util.equals(DumpRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DumpResponse
 */
export class DumpResponse extends Message<DumpResponse> {
  /**
   * @generated from field: string dump = 1;
   */
  dump = "";

  constructor(data?: PartialMessage<DumpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DumpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dump", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DumpResponse {
    return new DumpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DumpResponse {
    return new DumpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DumpResponse {
    return new DumpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DumpResponse | PlainMessage<DumpResponse> | undefined, b: DumpResponse | PlainMessage<DumpResponse> | undefined): boolean {
    return proto3.util.equals(DumpResponse, a, b);
  }
}

/**
 * @generated from message api.v1.LoadRequest
 */
export class LoadRequest extends Message<LoadRequest> {
  /**
   * @generated from field: string dump = 1;
   */
  dump = "";

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<LoadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.LoadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dump", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadRequest {
    return new LoadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadRequest {
    return new LoadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadRequest {
    return new LoadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoadRequest | PlainMessage<LoadRequest> | undefined, b: LoadRequest | PlainMessage<LoadRequest> | undefined): boolean {
    return proto3.util.equals(LoadRequest, a, b);
  }
}

/**
 * @generated from message api.v1.LoadResponse
 */
export class LoadResponse extends Message<LoadResponse> {
  constructor(data?: PartialMessage<LoadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.LoadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadResponse {
    return new LoadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadResponse {
    return new LoadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadResponse {
    return new LoadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoadResponse | PlainMessage<LoadResponse> | undefined, b: LoadResponse | PlainMessage<LoadResponse> | undefined): boolean {
    return proto3.util.equals(LoadResponse, a, b);
  }
}

/**
 * @generated from message api.v1.CreateNamespaceRequest
 */
export class CreateNamespaceRequest extends Message<CreateNamespaceRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  constructor(data?: PartialMessage<CreateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreateNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined, b: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CreateNamespaceResponse
 */
export class CreateNamespaceResponse extends Message<CreateNamespaceResponse> {
  constructor(data?: PartialMessage<CreateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreateNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined, b: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ListNamespacesRequest
 */
export class ListNamespacesRequest extends Message<ListNamespacesRequest> {
  constructor(data?: PartialMessage<ListNamespacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListNamespacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNamespacesRequest {
    return new ListNamespacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamespacesRequest {
    return new ListNamespacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNamespacesRequest {
    return new ListNamespacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNamespacesRequest | PlainMessage<ListNamespacesRequest> | undefined, b: ListNamespacesRequest | PlainMessage<ListNamespacesRequest> | undefined): boolean {
    return proto3.util.equals(ListNamespacesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ListNamespacesResponse
 */
export class ListNamespacesResponse extends Message<ListNamespacesResponse> {
  /**
   * @generated from field: repeated string namespace = 1;
   */
  namespace: string[] = [];

  constructor(data?: PartialMessage<ListNamespacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListNamespacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNamespacesResponse {
    return new ListNamespacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamespacesResponse {
    return new ListNamespacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNamespacesResponse {
    return new ListNamespacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNamespacesResponse | PlainMessage<ListNamespacesResponse> | undefined, b: ListNamespacesResponse | PlainMessage<ListNamespacesResponse> | undefined): boolean {
    return proto3.util.equals(ListNamespacesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.DeleteNamespaceRequest
 */
export class DeleteNamespaceRequest extends Message<DeleteNamespaceRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  constructor(data?: PartialMessage<DeleteNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeleteNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNamespaceRequest | PlainMessage<DeleteNamespaceRequest> | undefined, b: DeleteNamespaceRequest | PlainMessage<DeleteNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteNamespaceRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DeleteNamespaceResponse
 */
export class DeleteNamespaceResponse extends Message<DeleteNamespaceResponse> {
  constructor(data?: PartialMessage<DeleteNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeleteNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNamespaceResponse | PlainMessage<DeleteNamespaceResponse> | undefined, b: DeleteNamespaceResponse | PlainMessage<DeleteNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteNamespaceResponse, a, b);
  }
}

